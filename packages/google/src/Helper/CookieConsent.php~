<?php

    // CONSENT  YES+shp.gws-20220217-0-RC1.fr+FX+936
    //          YES+shp-m.gws-20220217-0-RC1.fr+FX+818
    //          YES+shp-m.gws-20220217-0-RC1.fr+FX+089
    //          YES+
    private function manageCookieConsent(): void
    {
        if ($this->elementExists('[aria-label*=cookie]')) {
            $this->getBrowserPage()->click('[aria-label*=cookie]');
            $this->getBrowserPage()->waitForNavigation();
            self::$pageContent = $this->getBrowserPage()->content();
            Logger::log('cookie consent');
        }
    }

    private function manageCookieConsentForMobile(): void
    {
        for ($i = 0; $i < 100; ++$i) {
            $this->getBrowserPage()->waitForTimeout(rand(100, 200));
            if (! $this->elementExists('button div img[src^="htt"]')) {
                break;
            }
            Logger::log('Cookie consent for mobile: click `v`');

            try {
                $this->getBrowserPage()->tryCatch->click('button div img[src^="htt"]'); // @phpstan-ignore-line
            } catch (Exception $e) {
                Logger::log('Error on click on `button div img[src^="htt"]`');
                Logger::log($e->getMessage());

                break;
            }
        }

        if ($this->elementExists('button:nth-of-type(2n) div[role="none"]')) {
            Logger::log('Cookie consent for mobile: click `J\'accepte`');
            $this->getBrowserPage()->click('button:nth-of-type(2n) div[role="none"]');
        } else {
            Logger::log('Cookie consent accept button not found...');
        }
    }


    public function clickOn(string $url): bool
    {
        $selector = 'a[href="'.$url.'"][oncontextmenu]';

        if (! $this->elementExists('a[href="'.$url.'"][oncontextmenu]')) {
            return false;
        }

        $this->getBrowserPage()->waitForTimeout(2000);
        $this->getBrowserPage()->focus($selector);
        $this->getBrowserPage()->waitForTimeout(200);
        $this->getBrowserPage()->click($selector);

        return true;
    }




    public function getNextPage(): string
    {
        if (! $this->issetNextPage()) {
            throw new Exception('next page not found');
        }

        $this->getBrowserPage()->click(self::NEXT_PAGE_SELECTOR); // @phpstan-ignore-line
        $this->getBrowserPage()->waitForNavigation();
        self::$pageContent = $this->getBrowserPage()->content();

        return self::$pageContent;
    }

    public function issetNextPage(): bool
    {
        return $this->elementExists(implode(',', self::NEXT_PAGE_SELECTOR));
    }